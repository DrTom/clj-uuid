{"name":"clj-uuid","tagline":"A Clojure library that extends the java.util.UUID class with true v1 (time based) and v3/v5 (namespace based) identifiers","body":"# clj-uuid\r\n\r\nA Clojure library for generation and utilization of UUIDs (Universally\r\nUnique Identifiers) as described by RFC-4122. This library extends the\r\nstandard Java UUID class to provide true v1 (time based) and v3/v5\r\n(namespace based) identifier generation. Additionally, a number of\r\nuseful supporting utilities are provided to support serialization and\r\nmanipulation of these UUIDs in a simple, efficient manner.\r\n\r\nThe essential nature of the value RFC4122 UUIDs provide is that of an\r\nenormous namespace and a deterministic mathematical model by means of\r\nwhich one navigates it. UUIDs represent an extremely powerful and\r\nversatile computation technique that is often overlooked, and\r\nunderutilized. In my opinion, this, in part, is due to the generally\r\npoor quality, performance, and capability of available libraries and,\r\nin part, due to a general misunderstanding in the popular consiousness\r\nof their proper use and benefit. It is my hope that this library will\r\nserve to expand awareness, make available, and simplify use of RFC4122\r\nidentifiers to a wider audience.\r\n\r\n## How Big?\r\n\r\nThe provided namespace represents an _inexhaustable_ resource and as\r\nsuch can be used in a variety of ways not feasible using traditional\r\ntechniques rooted in the notions imposed by finite resources.  When I\r\nsay \"inexhaustable\" this of course is slight hyperbolie, but not by\r\nmuch.  The upper bound on the representation implemented by this\r\nlibrary limits the number of unique identifiers to a mere...\r\n\r\n*three hundred forty undecillion two hundred eighty-two decillion three*\r\n*hundred sixty-six nonillion nine hundred twenty octillion nine hundred* \r\n*thirty-eight septillion four hundred sixty-three sextillion four hundred*\r\n*sixty-three quintillion three hundred seventy-four quadrillion six hundred*\r\n*seven trillion four hundred thirty-one billion seven hundred sixty-eight*\r\n*million two hundred eleven thousand four hundred and fifty-five.*\r\n\r\nIf you think you might be starting to run low, let me know when you get down\r\nto your last few undecillion or so and I'll see what I can do to help out.\r\n\r\n\r\n## Motivation\r\n\r\nTo a large extent, the design of the algorithmic\r\nimplementation is inspired by the Common-Lisp library\r\n[_UNICLY_](http://github.com/mon-key/unicly) which is a painstakingly\r\noptimized, encyclopaedic implementation of RFC-4122 the author of\r\nwhich, Stan Pearman, has devoted considerable effort to research, refine, and\r\nimprove.  To my knowledge there is no more performant  and\r\nprecise implementation of the RFC-4122 specification available\r\nanywhere, in any language, on any platform.\r\n\r\nThat having been said, this library intends to present a slightly more\r\ncomfortable public interface that places slightly more priority on\r\nconvenient DWIM semantics at the cost of somewhat less emphasis on\r\nlow level performance optimizations.  Since this library is built as\r\nan extension to the standard java.util.UUID class whose implementation\r\nlargely dominates its performance characteristics anyway, this seems to\r\nbe a reasonable philosophy.\r\n\r\n## License\r\n\r\nCopyright Â© 2013 Dan Lentz\r\n\r\nDistributed under the Eclipse Public License either version 1.0 \r\n\r\n## Usage\r\n\r\n### The Most Recent Release\r\n\r\nWith Leiningen:\r\n\r\n```clj\r\n[danlentz/clj-uuid \"0.0.6-SNAPSHOT\"]\r\n```\r\n\r\nWith Maven:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>danlentz</groupId>\r\n  <artifactId>clj-uuid</artifactId>\r\n  <version>0.0.6-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}